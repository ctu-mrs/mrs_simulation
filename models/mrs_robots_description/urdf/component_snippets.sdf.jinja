<?xml version="1.0"?>

<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
<!-- !!    THIS DOCUMENT CONTAINS ONLY COMMON COMPONENTS MACRO AND    !! -->
<!-- !!    PARAMETERS DEFINITIONS. IT SHOULD NOT CONTAIN ANY          !! -->
<!-- !!                  ARGUMENTS "$(arg ...)"                       !! -->
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->

<!-- License {-->
<!--
Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--}-->

<!-- Math constants {-->
<!-- Functions and constants from the python math module (e.g. pi and trigonometric functions) are available for use -->

{%- set pi = 3.14159265359 -%}

{%- macro rad(deg) -%}
{{ deg * pi / 180 }}
{%- endmacro -%}

{%- set rad0 = 0.0 -%}
{%- set rad10 = 10 * pi / 180 -%}
{%- set rad20 = 20 * pi / 180 -%}
{%- set rad30 = 30 * pi / 180 -%}
{%- set rad45 = 45 * pi / 180 -%}
{%- set rad60 = 60 * pi / 180 -%}
{%- set rad65 = 65 * pi / 180 -%}
{%- set rad70 = 70 * pi / 180 -%}
{%- set rad85 = 85 * pi / 180 -%}
{%- set rad90 = 90 * pi / 180 -%}
{%- set rad95 = 95 * pi / 180 -%}
{%- set rad115 = 115 * pi / 180 -%}
{%- set rad120 = 120 * pi / 180 -%}
{%- set rad135 = 135 * pi / 180 -%}
{%- set rad150 = 150 * pi / 180 -%}
{%- set rad180 = 180 * pi / 180 -%}
{%- set rad210 = 210 * pi / 180 -%}

{%- set sin30 = 0.5 -%}
{%- set sin45 = 0.70710678118 -%}
{%- set sin60 = 0.86602540378 -%}
{%- set sin90 = 1.0 -%}

{%- set cos30 = 0.86602540378 -%}
{%- set cos45 = 0.70710678118 -%}
{%- set cos60 = 0.5 -%}
{%- set cos90 = 0.0 -%}

{%- set sqrt2 = 1.41421356237 -%}
<!--}-->

<!-- ================================================================== -->
<!-- ||   generic macro definitions (visualization, collision ...)   || -->
<!-- ================================================================== -->

<!-- {-->

<!-- Pose macro {-->
{%- macro pose_macro(x, y, z, roll, pitch, yaw) -%}
<pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
{%- endmacro -%}
<!--}-->

<!-- Inertia macro {-->
{%- macro inertia_macro(ixx, ixy, ixz, iyy, iyz, izz) -%}
<inertia>
  <ixx>{{ ixx }}</ixx>
  <ixy>{{ ixy }}</ixy>
  <ixz>{{ ixz }}</ixz>
  <iyy>{{ iyy }}</iyy>
  <iyz>{{ iyz }}</iyz>
  <izz>{{ izz }}</izz>
</inertia>
{%- endmacro -%}
<!--}-->

<!-- Cylinder inertia {-->
{%- macro cylinder_inertia(m, r, h) -%}
<inertia>
  <ixx>{{ m * ( 3 * r * r + h * h ) / 12 }}</ixx>
  <ixy>0</ixy>
  <ixz>0</ixz>
  <iyy>{{ m * ( 3 * r * r + h * h ) / 12 }}</iyy>
  <iyz>0</iyz>
  <izz>{{ m * r * r / 2 }}</izz>
</inertia>
{%- endmacro -%}
<!--}-->

<!-- Macro for visualization of colored box {-->
{%- macro colored_box(robot_namespace, name, size_x, size_y, size_z, color, parent, x, y, z, roll, pitch, yaw) -%}
<link name="{{ name }}_link">
  <inertial>
    <mass>0.001</mass>  <!-- [kg] -->
    {{ inertia_macro(0.001,0,0,0.001,0,0.001) }}
  </inertial>
  {{ pose_macro(x, y, z, roll, pitch, yaw) }}
  <visual name="{{ name }}_link_visual">
    <geometry>
      <box>
        <size>{{ size_x }} {{ size_y }} {{ size_z }}</size>
      </box>
    </geometry>
    <material>
      <script>
        <name>Gazebo/{{ color }}</name>
        <uri>file://media/materials/scripts/gazebo.material</uri>
      </script>
    </material>
  </visual>
</link>

<joint name="{{ name }}_joint" type="fixed">
  <parent>{{ parent }}</parent>
  <child>{{ name }}_link</child>
</joint>
{%- endmacro -%}
<!--}-->

<!-- Macro for visualization of mesh {-->
{%- macro visual_macro(robot_namespace, name, mesh_file, mesh_scale, color, parent, x, y, z, roll, pitch, yaw) -%}
<link name="{{ name }}_link">
  <inertial>
    <mass>0.001</mass>  <!-- [kg] -->
    {{ inertia_macro(0.001,0,0,0.001,0,0.001) }}
  </inertial>
  {{ pose_macro(x, y, z, roll, pitch, yaw) }}
  <visual name="{{ name }}_link_visual">
    <geometry>
      <mesh>
        <uri>{{ mesh_file }}</uri>
        <scale>{{ mesh_scale }}</scale>
      </mesh>
    </geometry>
    <material>
      <script>
        <name>Gazebo/{{ color }}</name>
        <uri>file://media/materials/scripts/gazebo.material</uri>
      </script>
    </material>
  </visual>
</link>

<joint name="{{ name }}_joint" type="fixed">
  <parent>{{ parent }}</parent>
  <child>{{ name }}_link</child>
</joint>
{%- endmacro -%}
<!--}-->

<!-- Macro for leg {-->
{%- macro leg_macro(robot_namespace, name, mesh_file, mesh_scale, color, parent, x, y, z, roll, pitch, yaw, collision_height, collision_radius) -%}
<link name="{{ name }}_link">
  <inertial>
    <mass>0.05</mass>  <!-- [kg] -->
    {{ inertia_macro(0.01,0,0,0.01,0,0.01) }}
  </inertial>
  {{ pose_macro(x, y, z, roll, pitch, yaw) }}
  <visual name="{{ name }}_link_visual">
    <geometry>
      <mesh>
        <uri>{{ mesh_file }}</uri>
        <scale>{{ mesh_scale }}</scale>
      </mesh>
    </geometry>
    <material>
      <script>
        <name>Gazebo/{{ color }}</name>
        <uri>file://media/materials/scripts/gazebo.material</uri>
      </script>
    </material>
  </visual>
  <collision name="{{ name }}_link_collision">
    {{ pose_macro(0.005, 0, 0, 0, 0, 0) }}
    <geometry>
      <cylinder>
        <length>{{ collision_height }}</length>
        <radius>{{ collision_radius }}</radius>
      </cylinder>
    </geometry>
    <surface>
      <contact>
        <ode>
          <min_depth>0.001</min_depth>
          <max_vel>0.0</max_vel>
        </ode>
      </contact>
    </surface>
  </collision>
</link>

<joint name="{{ name }}_joint" type="fixed">
  <parent>{{ parent }}</parent>
  <child>{{ name }}_link</child>
</joint>
{%- endmacro -%}
<!--}-->

<!-- Prop macro {-->
{%- macro prop_macro(robot_namespace, direction, rotor_velocity_slowdown_sim, motor_constant, moment_constant, parent, mass, radius, time_constant_up, time_constant_down, max_rot_velocity, motor_number, rotor_drag_coefficient, rolling_moment_coefficient, color, mesh_file, mesh_scale, x, y, z, roll, pitch, yaw, ixx, ixy, ixz, iyy, iyz, izz) -%}
<link name="prop_{{ motor_number }}_link">
  {{ pose_macro(x, y, z, roll, pitch, yaw) }}
  <inertial>
    <mass>{{ mass }}</mass>
    {{ inertia_macro(ixx, ixy, ixz, iyy, iyz, izz) }}
  </inertial>
  <visual name="prop_{{ motor_number }}_link_visual">
    <geometry>
      <mesh>
        <uri>{{ mesh_file }}</uri>
        <scale>{{ mesh_scale }}</scale>
      </mesh>
    </geometry>
    <material>
      <script>
        <name>Gazebo/{{ color }}</name>
        <uri>file://media/materials/scripts/gazebo.material</uri>
      </script>
    </material>
  </visual>
  <collision name="prop_{{ motor_number }}_link_collision">
    <geometry>
      <cylinder>
        <length>0.005</length>
        <radius>{{ radius }}</radius>
      </cylinder>
    </geometry>
  </collision>
</link>

<gazebo>
  <plugin name="prop_{{ motor_number }}_motor_model" filename="libgazebo_motor_model.so">
    <robotNamespace>{{ robot_namespace }}</robotNamespace>
    <jointName>prop_{{ motor_number }}_joint</jointName>
    <linkName>prop_{{ motor_number }}_link</linkName>
    <turningDirection>{{ direction }}</turningDirection>
    <timeConstantUp>{{ time_constant_up }}</timeConstantUp>
    <timeConstantDown>{{ time_constant_down }}</timeConstantDown>
    <maxRotVelocity>{{ max_rot_velocity }}</maxRotVelocity>
    <motorConstant>{{ motor_constant }}</motorConstant>
    <momentConstant>{{ moment_constant }}</momentConstant>
    <commandSubTopic>/gazebo/command/motor_speed</commandSubTopic>
    <motorNumber>{{ motor_number }}</motorNumber>
    <rotorDragCoefficient>{{ rotor_drag_coefficient }}</rotorDragCoefficient>
    <rollingMomentCoefficient>{{ rolling_moment_coefficient }}</rollingMomentCoefficient>
    <motorSpeedPubTopic>/motor_speed/{{ motor_number }}</motorSpeedPubTopic>
    <rotorVelocitySlowdownSim>{{ rotor_velocity_slowdown_sim }}</rotorVelocitySlowdownSim>
  </plugin>
</gazebo>

<joint name="prop_{{ motor_number }}_joint" type="revolute">
  <parent>{{ parent }}</parent>
  <child>prop_{{ motor_number }}_link</child>
  <axis>
    <xyz>0 0 1</xyz>
    <limit>
      <lower>-1e+16</lower>
      <upper>1e+16</upper>
    </limit>
    <use_parent_model_frame>1</use_parent_model_frame>
  </axis>
</joint>
{%- endmacro -%}
<!--}-->

<!-- Macro for main multirotor without mesh {-->
{%- macro multirotor_base_without_mesh_macro(robot_namespace, mass, body_radius, body_height, rotor_velocity_slowdown_sim, ixx, ixy, ixz, iyy, iyz, izz) -%}
<link name="base_link">
  <inertial>
    <mass>{{ mass }}</mass>  <!-- [kg] -->
    {{ inertia_macro(ixx, ixy, ixz, iyy, iyz, izz) }}
  </inertial>
  <collision name="base_link_collision">
    <geometry>
      <cylinder>
        <length>{{ body_height }}</length>
        <radius>{{ body_radius }}</radius>
      </cylinder>
    </geometry>
    <surface>
      <contact>
        <ode>
          <min_depth>0.001</min_depth>
          <max_vel>0.0</max_vel>
        </ode>
      </contact>
    </surface>
  </collision>
</link>

<!-- attach multirotor_base_plugin to the base_link -->
<gazebo>
  <plugin filename="libgazebo_multirotor_base_plugin.so" name="rosbag">
    <robotNamespace>{{ robot_namespace }}</robotNamespace>
    <linkName>base_link</linkName>
    <rotorVelocitySlowdownSim>{{ rotor_velocity_slowdown_sim }}</rotorVelocitySlowdownSim>
  </plugin>
</gazebo>
{%- endmacro -%}
<!--}-->

<!--}-->

